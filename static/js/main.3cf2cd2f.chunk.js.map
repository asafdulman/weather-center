{"version":3,"sources":["cmps/NavBar.jsx","cmps/CitiesList.jsx","cmps/DayPreview.jsx","cmps/DaysList.jsx","services/storageService.js","services/weatherService.js","cmps/Modal.jsx","pages/Home.jsx","pages/Favorites.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavBar","className","to","CitiesList","cities","onAddCity","map","city","index","onClick","key","LocalizedName","DayPreview","day","farToCelsius","temperature","toFixed","date","Date","newDate","split","reverse","join","console","log","setDate","src","iconNum","Day","Icon","getIconUrl","alt","IconPhrase","Temperature","Minimum","Value","Maximum","DaysList","days","storageService","saveToStorage","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","weatherService","getWeather","cityKey","axios","get","then","res","data","getCities","value","saveCity","loadCity","saveFavCity","favCities","push","loadFavCity","Modal","Home","state","showModal","isFav","cityToShow","cityToSave","onHandleInput","a","target","field","name","setState","prevState","Key","DailyForecasts","addToFavorites","setTimeout","class","type","autoComplete","placeholder","onChange","this","icon","faMapMarkerAlt","Component","Favorites","loadFavCities","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cf2cd2f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nexport function NavBar() {\r\n    return (\r\n        <div className=\"main-nav\">\r\n            <NavLink className=\"nav-btn\" to=\"/\">Home</NavLink>\r\n            <NavLink className=\"nav-btn\" to=\"/favorites\">Favorites</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function CitiesList({ cities, onAddCity }) {\r\n\r\n    return (\r\n        <div>\r\n            {cities && <ul className=\"cities-list\">\r\n                {cities.map((city, index) => <button className=\"city-btn\" onClick={() => { onAddCity(city) }} key={index}>{city.LocalizedName}</button>)}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function DayPreview({ day }) {\r\n\r\n    function farToCelsius(temperature) {\r\n        return temperature = ((temperature - 32) * 5 / 9).toFixed(0)\r\n    }\r\n\r\n     function getIconUrl() {\r\n        let iconNum = day.Day.Icon;\r\n        if (iconNum < 10) iconNum = '0' + iconNum;\r\n        return `https://developer.accuweather.com/sites/default/files/${iconNum}-s.png`\r\n     }\r\n\r\n    function setDate() {\r\n        let date = day.Date\r\n        let newDate = date.split('T')\r\n        date = newDate[0]\r\n        newDate = date.split('-')\r\n        date = newDate.reverse().join('.')\r\n        console.log('date', date);\r\n        return date\r\n    }\r\n\r\n    return (\r\n        <div className=\"day-card\">\r\n            <p className=\"date\">{setDate()}</p>\r\n            <hr/>\r\n            <img src={getIconUrl()} alt=\"\"/>\r\n            <hr/>\r\n            <p >{day.Day.IconPhrase}</p>\r\n            <p>{farToCelsius(day.Temperature.Minimum.Value)}°c - {farToCelsius(day.Temperature.Maximum.Value)}°c</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { DayPreview } from './DayPreview'\r\n\r\n\r\nexport function DaysList({ days, city }) {\r\n\r\n\r\n    return (\r\n        <div className=\"days-list-box\">\r\n            <h3>{city.LocalizedName}</h3>\r\n            <div className=\"days-list\">\r\n            \r\n            {days && days.map((day, index) => <DayPreview key={index} day={day} city={city} />)}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","export const storageService = {\r\n    saveToStorage,\r\n    loadFromStorage\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val)\r\n}\r\n\r\n","import axios from 'axios';\r\nimport { storageService , loadFromStorage } from './storageService';\r\n\r\nexport const weatherService = {\r\n    getWeather,\r\n    getCities,\r\n    saveCity,\r\n    loadCity,\r\n    saveFavCity,\r\n    loadFavCity\r\n}\r\n\r\nvar favCities = []\r\nvar citiesNames = []\r\n\r\nfunction getCities(value) {\r\n    return axios.get(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=mlVMZtayZdElb8tDwwm2AdErMADsCHOf&q=${value}&language=en-us`)\r\n        .then(res => res.data)\r\n}\r\nfunction getWeather(cityKey) {\r\n    return axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=mlVMZtayZdElb8tDwwm2AdErMADsCHOf&language=en-us&details=false&metric=false`)\r\n        .then(res => res.data)\r\n}\r\n\r\n\r\nfunction saveCity(city) {\r\n    storageService.saveToStorage('CITY' ,city)\r\n}\r\n\r\nfunction loadCity(key) {\r\n    storageService.loadFromStorage(key)\r\n}\r\n\r\nfunction saveFavCity(city) {\r\n    favCities.push(city)\r\n    storageService.saveToStorage('FAV_CITIES' ,favCities)\r\n}\r\n\r\nfunction loadFavCity(key) {\r\n    return storageService.loadFromStorage(key)\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function Modal() {\r\n    return (\r\n        <div className=\"modal-box\">\r\n            <p>Added to Favorites</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CitiesList } from '../cmps/CitiesList'\r\nimport { DaysList } from '../cmps/DaysList'\r\nimport { weatherService } from '../services/weatherService'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Modal from '../cmps/Modal'\r\n\r\nexport class Home extends Component {\r\n\r\n    state = {\r\n        showModal: false,\r\n        isFav: false,\r\n        value: '',\r\n        cityToShow: '',\r\n        cityToSave: '',\r\n        cities: [],\r\n    }\r\n\r\n    onHandleInput = async ({ target }) => {\r\n        var field = target.name;\r\n        var value = target.value;\r\n        this.setState(prevState => {\r\n            return {\r\n                city: {\r\n                    ...prevState.city,\r\n                    [field]: value\r\n                },\r\n                value\r\n            }\r\n        })\r\n\r\n        const cities = await weatherService.getCities(value)\r\n        console.log('cities', cities);\r\n        this.setState({ cities })\r\n    }\r\n\r\n    onAddCity = async (city) => {\r\n        const cityToShow = await weatherService.getWeather(city.Key)\r\n        console.log('city', cityToShow.DailyForecasts);\r\n        this.setState({ cityToSave: city, cityToShow, value: '', cities: [] })\r\n    }\r\n\r\n    addToFavorites = (city) => {\r\n        weatherService.saveFavCity(city)\r\n        console.log('city added to favs', city);\r\n        this.setState({ isFav: !this.state.isFav, showModal: !this.state.showModal })\r\n        setTimeout(() => {\r\n            this.setState({ showModal: !this.state.showModal })\r\n        }, 2000);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"stars small\"></div>\r\n                <div class=\"stars medium\"></div>\r\n                <div class=\"stars large\"></div>\r\n\r\n                <div className=\"home-box\">\r\n                    <h1 className=\"home-heading\">Weather-Center</h1>\r\n                    <input className=\"home-input\" type=\"text\" name=\"days\" autoComplete=\"off\" placeholder=\"Type a Place\" onChange={this.onHandleInput} value={this.state.value} />\r\n                    <CitiesList onAddCity={this.onAddCity} cities={this.state.cities} />\r\n                    <FontAwesomeIcon onClick={() => { this.addToFavorites(this.state.cityToSave) }} className={this.state.isFav ? 'fav-icon-active' : 'fav-icon'} icon={faMapMarkerAlt} />\r\n                    <DaysList days={this.state.cityToShow.DailyForecasts} city={this.state.cityToSave} />\r\n                    {this.state.showModal && <Modal />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { DaysList } from '../cmps/DaysList'\r\nimport { weatherService } from '../services/weatherService'\r\n\r\nexport class Favorites extends Component {\r\n\r\n    state = {\r\n        favCities: [],\r\n        cityToShow: '',\r\n        cityToSave:'',\r\n    }\r\n\r\n    componentDidMount() {\r\n        const favCities = this.loadFavCities()\r\n        console.log('favCities', favCities);\r\n        this.setState({ favCities })\r\n    }\r\n\r\n    loadFavCities = () => {\r\n        return weatherService.loadFavCity('FAV_CITIES')\r\n    }\r\n\r\n    onAddCity = async (city) => {\r\n        const cityToShow = await weatherService.getWeather(city.Key)\r\n        console.log('city', cityToShow.DailyForecasts);\r\n        this.setState({ cityToSave: city, cityToShow})\r\n    }\r\n\r\n    render() {\r\n\r\n        const { favCities } = this.state\r\n        if (!favCities) return <h1>No Favorites Cities Here</h1>\r\n        return (\r\n            <div className=\"favorite-box\">\r\n                <h1>Your Favorite Places</h1>\r\n                <ul className=\"favorite-list\">\r\n                    {favCities.map((city, index) => <h3 onClick={()=> {this.onAddCity(city)}} key={index} className=\"city-name\">{city.LocalizedName}</h3>)}\r\n                </ul>\r\n\r\n                <DaysList  days={this.state.cityToShow.DailyForecasts} city={this.state.cityToSave} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport { NavBar } from './cmps/NavBar';\nimport { Switch, Route } from 'react-router-dom';\nimport { Home } from './pages/Home';\nimport { Favorites } from './pages/Favorites';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavBar />\n      </header>\n      <main>\n        <Switch>\n          <Route component={Favorites} path=\"/favorites\" />\n          <Route component={Home} path=\"/\" />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/global.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}